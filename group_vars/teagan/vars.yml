---

local_username: tglenn
local_user_shell: /bin/zsh

homebrew_user_packages:
  - ssh-copy-id
  - jq
  - ccze
  - freetype
  - tree
  - redis
  - telnet
  - tmux
  - screen
  - python
  - git
  - nmap
  - nvm
  - pyenv-virtualenv
  - lftp
  - ipmitool
  - ansible
  - unrar
  - p7zip
  - minicom
  - coreutils
  - spice-gtk
  - wget
  - java

homebrew_cask_user_packages:
  - intellij-idea
  - pycharm
  - goland
  - webstorm
  - osxfuse
  - steam
  - viscosity
  - virtualbox
  - gimp
  - slack
  - arduino
  - spotify
  - xquartz
  - istat-menus
  - iterm2
  - firefox

ssh_private_key: "{{ vault_ssh_private_key }}"

ssh_public_key: >
  ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDcd2P1Yl7HSKQHnyZX4DgT1QN5ZBb+OPlTDtm1Mo/wFQ/0qzKrVewDKQoG2iMjdRg3RflYRuF5TyE+M5p0HLUbq7zApWGwgnVC725wWTaHWpCrSJvV/+mldUq9UvrmGtnx9F7he8LA6CtJUlGFSr/3wVsGOcfwbygPDKYe3zN5B60HqnOWnVxwOaxsTYG22Hbait+ynPZOWEnrHTJFec4i3punl9W8QxzSqsoDTxTxBQ81nCuJMdvaxn6VkuxUWYX/XCJzK/oMzK6e9D32/yQsBFt4I9mKSt1c54TFVydRuWm48KoPVWY7+BcoMGAupj9ypOG1JJEcNK0We2BkYbV3 tglenn@infinite-improbability

git_config: |
  [user]
    email = teagan.m.glenn@gmail.com
    name = Teagan glenn
  [core]
    filemode = true
  [alias]
    pushall = !git remote | xargs -L1 -I R git push R master
    modpull = "!git submodule foreach \"git checkout -f master; git pull\""
    modpush = "!git submodule foreach \"git checkout -f master; git pushall\""

bash_profile: |
  # Bash profile that syncs bash profile and other pref files
  
  export PROMPT_COMMAND="history -a"
  shopt -s histappend
  
  export GITAWAREPROMPT="${HOME}/.bash/git-aware-prompt"
  source "${GITAWAREPROMPT}/main.sh"
  
  # If you use macports
  if [ -d /opt/local/bin ]; then
    export PATH=/opt/local/bin:/opt/local/sbin:/home/ldap/misc/openstack:/usr/local/Cellar:/usr/local/bin:$PATH
  fi

  if [ -e "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" ]; then
    export EDITOR="'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl' -w"
  fi
  
  # Shell color options
  export force_color_prompt=yes
  export CLICOLOR=1
  export LSCOLORS=ExFxcxdxcxegedbxgxEbEg
  
  if [ -x /usr/bin/dircolors ]; then
      test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
      alias ls='ls --color=auto'
      #alias dir='dir --color=auto'
      #alias vdir='vdir --color=auto'
  
      alias grep='grep --color=auto'
      alias fgrep='fgrep --color=auto'
      alias egrep='egrep --color=auto'
  fi
  
  # colored GCC warnings and errors
  export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
  
  # some more ls aliases
  alias ll='ls -l'
  alias la='ls -A'
  alias l='ls -CF'
  
  # Bash Prompt
  case $TERM in
    xterm*|xterm|linux)
      export PS1="\[$txtred\]\h\[$txtcyn\] \u:\[$txtrst\]\w\[$txtwht\]\[$txtrst\]:\[$txtpur\]\$git_branch\[$txtrst\]\$git_status "
      ;;
    *)
      export PS1="\h:\w \u\$ "
      ;;
  esac
  
  if type brew 2&>/dev/null; then
    for completion_file in $(brew --prefix)/etc/bash_completion.d/*; do
      source "$completion_file"
    done
  fi

  ## PROFILEPUSH
  # custom function to push bash profile, ssh configs, vimrc, screenrc etc. to remote host
  
  
  # Serial to check against for updating remote hosts
  #profilepush:SERIAL:19052901
  
  # Add additional files with #profilepush:FILE:<filename>
  ##profilepush:FILE:.ssh/authorized_keys
  #profilepush:FILE:.bash_profile
  #profilepush:FILE:.bash
  #profilepush:FILE:.vimrc
  #profilepush:FILE:.vim
  #profilepush:FILE:.screenrc
  #profilepush:FILE:.ssh/config
  
  # Sync Function
  profilepush () {
  
  
  myHost=$1
  
  
  remoteVersion=0
  localVersion=`grep "^#profilepush:SERIAL:" ~/.bash_profile | awk 'BEGIN{FS=":"}{print $3}'`
  
  PUSH_HOME_HOSTS=.home_version_hosts
  
  if [ -d $PUSH_HOME_HOSTS ]; then
    if [ -f $PUSH_HOME_HOSTS/$myHost ]; then
      remoteVersion=`cat $PUSH_HOME_HOSTS/$myHost`
    else
      mkdir $PUSH_HOME_HOSTS
    fi
  fi
  
  if [ $remoteVersion -lt $localVersion ]; then
    myFiles=$(grep "^#profilepush:FILE:" ~/.bash_profile | awk -F : '{print $3}')
    echo Files: $myFiles
  
    ssh $myHost "if [ ! -d .ssh ]; then  mkdir $HOME/.ssh; fi | if [ ! -d .historyfiles ]; then mkdir .historyfiles; fi | if [ ! -d .home_version_hosts ]; then  mkdir .home_version_hosts; fi"
  
    ( for file in $( echo $myFiles); do cd ; rsync -avRLP $file $myHost:; done ) && echo $localVersion > $PUSH_HOME_HOSTS/$myHost
  fi
  
  ssh $myHost
  }
  
  # Per-Host History File
  export HISTFILE="${HOME}/.historyfiles/.bash_history.`hostname`"
  
  # TCPDUMP Alias for DHCP
  alias dhcptcpdump="tcpdump -vvv -s 0 '((port 67 or port 68) and (udp[8:1] = 0x1))'"
  
  # All-Purpose Aliases
  
  alias sbash='sudo bash -l'
  alias less=view
  alias more=view

  # pip installations
  alias ansible-pip="/usr/local/opt/ansible/libexec/bin/pip"
  alias brew-pip="/usr/local/opt/python/bin/pip"
  alias system-pip="/usr/local/bin/pip"
  export HOMEBREW_NO_INSTALL_CLEANUP=1
  export BASH_SILENCE_DEPRECATION_WARNING=1

  # Print <Last Regex Match> to end of file.
  # Useful for tailing the last timestamped log entry
  loglast() {
      for i in $@; do
        echo -e "\n\n\n $i.log \n\n"
        sed -n 'H; /^\[ Mon/h; ${x;p;}' $i
        done | ccze -A
  }

  # Memory error logs
  alias memerr="grep 'memory read error' /var/log/kern.log | sed -r 's/([[:alpha:]]{3}\s[[:digit:]]{2}\s[[:digit:]]{2}:[[:digit:]]{2}).*CPU_SrcID#([[:digit:]]+).*Chan#([[:digit:]]+).*DIMM#([[:digit:]]+).*/\1 CPU:\2 Channel:\3 DIMM:\4/' | sort | uniq -c"
  
  # KVM Guest Info
  kvm-info () {
  printf "%-15s %-7s %-19s %-45s %-6s %-0s\n" "hostname" "vnic" "mac addr" "disk img" "vnc" "ip addr"
  for i in `sudo virsh list --all | tail -n +3 | awk '{print $2}'`; do
    echo $(sudo virsh dumpxml $i |
    egrep "(vnet|mac address|source file)" | cut -d "'" -f2) | while read img mac vnet; do
      vncport=$(virsh dumpxml $i| egrep "vnc" | cut -d "'" -f4)
      vncport=${vncport:="NA"}
      hostip=$(host $i | head -n1 | awk '{print $NF}')
      hostip=${hostip:="NA"}
      printf "%-15s %-7s %-19s %-45s %-6s %-15s\n" $i $vnet $mac $img $vncport $hostip
    done
  done
  }

  # MD5 comparison check for md5sum text and file
  md5check () {
  
  checkfile=$1
  checklist=$2
  
  if [ "$(grep $checkfile $checklist | awk '{print $1}')" == "$(md5 $checkfile | awk '{print $NF}')" ]; then
    echo -e "MD5 Sums $(tput setaf 1)MATCH"
  else
    echo -e "MD5 Sums $(tput setaf 1)DO NOT MATCH"
  fi
  }
  
  test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"


ssh_config: |
    Identityfile ~/.ssh/id_rsa

    Host blog
      User root
      HostName 104.237.139.116
      Identityfile ~/.ssh/id_rsa

    Host magicmirror
      User root
      HostName 10.0.11.184
      Identityfile ~/.ssh/id_rsa

    Host coral
      User root
      Hostname 10.0.11.2
      IdentityFile ~/.ssh/id_rsa

    Host jenkins
      Hostname 10.0.10.79
      IdentityFile ~/.ssh/id_rsa

    Host automation-cluster
      Hostname 10.0.11.174
      IdentityFile ~/.ssh/id_rsa

    Host ansible-fest-lab
      User student47
      HostName student47.ansiblefestnetwork1.rhdemo.io
      IdentityFile ~/.ssh/id_rsa

    ForwardAgent yes
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    ServerAliveInterval 240
    TCPKeepAlive yes
    LogLevel QUIET
    XAuthLocation /usr/X11/bin/xauth

zshrc: |
  # If you come from bash you might have to change your $PATH.
  # export PATH=$HOME/bin:/usr/local/bin:$PATH
  
  # Path to your oh-my-zsh installation.
  export TERM="xterm-256color"
  export ZSH="$HOME/.oh-my-zsh"
  # Set name of the theme to load --- if set to "random", it will
  # load a random theme each time oh-my-zsh is loaded, in which case,
  # to know which specific one was loaded, run: echo $RANDOM_THEME
  # See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
  ZSH_THEME="agnostor"
  
  # Set list of themes to pick from when loading at random
  # Setting this variable when ZSH_THEME=random will cause zsh to load
  # a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
  # If set to an empty array, this variable will have no effect.
  # ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )
  
  # Uncomment the following line to use case-sensitive completion.
  # CASE_SENSITIVE="true"
  
  # Uncomment the following line to use hyphen-insensitive completion.
  # Case-sensitive completion must be off. _ and - will be interchangeable.
  # HYPHEN_INSENSITIVE="true"
  
  # Uncomment the following line to disable bi-weekly auto-update checks.
  # DISABLE_AUTO_UPDATE="true"
  
  # Uncomment the following line to automatically update without prompting.
  # DISABLE_UPDATE_PROMPT="true"
  
  # Uncomment the following line to change how often to auto-update (in days).
  # export UPDATE_ZSH_DAYS=13
  
  # Uncomment the following line if pasting URLs and other text is messed up.
  # DISABLE_MAGIC_FUNCTIONS=true
  
  # Uncomment the following line to disable colors in ls.
  # DISABLE_LS_COLORS="true"
  
  # Uncomment the following line to disable auto-setting terminal title.
  # DISABLE_AUTO_TITLE="true"
  
  # Uncomment the following line to enable command auto-correction.
  ENABLE_CORRECTION="true"
  
  # Uncomment the following line to display red dots whilst waiting for completion.
  COMPLETION_WAITING_DOTS="true"
  
  # Uncomment the following line if you want to disable marking untracked files
  # under VCS as dirty. This makes repository status check for large repositories
  # much, much faster.
  # DISABLE_UNTRACKED_FILES_DIRTY="true"
  # ZSH_DISABLE_COMPFIX="true"
  
  # Uncomment the following line if you want to change the command execution time
  # stamp shown in the history command output.
  # You can set one of the optional three formats:
  # "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
  # or set a custom format using the strftime function format specifications,
  # see 'man strftime' for details.
  HIST_STAMPS="yyyy.mm.dd"
  
  # Would you like to use another custom folder than $ZSH/custom?
  # ZSH_CUSTOM=/path/to/new-custom-folder
  
  # Which plugins would you like to load?
  # Standard plugins can be found in ~/.oh-my-zsh/plugins/*
  # Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
  # Example format: plugins=(rails git textmate ruby lighthouse)
  # Add wisely, as too many plugins slow down shell startup.
  plugins=(
    git
    osx
    ansible
    cp
    copyfile
    copydir
    debian
    docker
    git
    git-auto-fetch
    git-extras
    github
    gitignore
    git-prompt
    git-remote-branch
    pip
    python
    pyenv
    pylint
    screen
    sublime
    virtualenv
  )
  
  
  source $ZSH/oh-my-zsh.sh
  
  # User configuration
  
  # export MANPATH="/usr/local/man:$MANPATH"
  
  # You may need to manually set your language environment
  # export LANG=en_US.UTF-8
  
  # Preferred editor for local and remote sessions
  if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
  else
    export EDITOR='/usr/local/bin/subl'
  fi
  
  # Compilation flags
  export ARCHFLAGS="-arch x86_64"
  
  # Set personal aliases, overriding those provided by oh-my-zsh libs,
  # plugins, and themes. Aliases can be placed here, though oh-my-zsh
  # users are encouraged to define aliases within the ZSH_CUSTOM folder.
  # For a full list of active aliases, run `alias`.
  #
  # Example aliases
  alias zshconfig="subl ~/.zshrc"
  alias ohmyzsh="subl ~/.oh-my-zsh"
  alias dhcptcpdump="tcpdump -vvv -s 0 '((port 67 or port 68) and (udp[8:1] = 0x1))'"
  
  # Home Assistant
  alias restartha='sudo systemctl restart home-assistant@homeassistant.service'
  alias stopha='sudo systemctl stop home-assistant@homeassistant.service'
  alias startha='sudo systemctl start home-assistant@homeassistant.service'
  alias cfgtest='/srv/homeassistant/bin/hass --script check_config'
  alias sourceha='source /srv/homeassistant/bin/activate'
  alias updateha='sourceha; pip3 install --upgrade homeassistant'
  
  # All-Purpose Aliases
  
  alias sroot='sudo zsh -l'
  alias less=view
  alias more=view
  
  # pip installations
  alias ansible-pip="/usr/local/opt/ansible/libexec/bin/pip"
  alias brew-pip="/usr/local/opt/python/bin/pip"
  alias system-pip="/usr/local/bin/pip"
  # Print <Last Regex Match> to end of file.
  # Useful for tailing the last timestamped log entry
  ## PROFILEPUSH
  # custom function to push bash profile, ssh configs, vimrc, screenrc etc. to remote host
  
  function colortable () {
  for i in {0..255}; do
    print -Pn "%${i}F${(l:3::0:)i}%f " ${${(M)$((i%8)):#7}:+$'\n'}
  done
  }
  
  # Serial to check against for updating remote hosts
  #profilepush:SERIAL:19102104
  
  # Add additional files with #profilepush:FILE:<filename>
  ##profilepush:FILE:.ssh/authorized_keys
  #profilepush:FILE:.zshrc
  #profilepush:FILE:.oh-my-zsh
  #profilepush:FILE:.p10k.zsh
  #profilepush:FILE:.vimrc
  #profilepush:FILE:.vim
  #profilepush:FILE:.screenrc
  #profilepush:FILE:.ssh/config
  
  # Sync Function
  profilepush () {
  
  
  myHost=$1
  
  
  remoteVersion=0
  localVersion=`grep "^#profilepush:SERIAL:" ~/.zshrc | awk 'BEGIN{FS=":"}{print $3}'`
  
  PUSH_HOME_HOSTS=.home_version_hosts
  
  if [ -d $PUSH_HOME_HOSTS ]; then
    if [ -f $PUSH_HOME_HOSTS/$myHost ]; then
      remoteVersion=`cat $PUSH_HOME_HOSTS/$myHost`
    else
      mkdir $PUSH_HOME_HOSTS
    fi
  fi
  
  if [ $remoteVersion -lt $localVersion ]; then
    myFiles=$(grep "^#profilepush:FILE:" ~/.zshrc | awk -F : '{print $3}')
    echo Files: $myFiles
  
    ssh $myHost "if [ ! -d .ssh ]; then  mkdir $HOME/.ssh; fi | if [ ! -d .historyfiles ]; then mkdir .historyfiles; fi | if [ ! -d .home_version_hosts ]; then  mkdir .home_version_hosts; fi"
  
    ( for file in $( echo $myFiles); do cd ; rsync -avRLP $file $myHost:; done ) && echo $localVersion > $PUSH_HOME_HOSTS/$myHost
  fi
  
  ssh $myHost
  }
  
  
  loglast() {
      for i in $@; do
        echo -e "\n\n\n $i.log \n\n"
        sed -n 'H; /^\[ Mon/h; ${x;p;}' $i
        done | ccze -A
  }
  
  
  # Memory error logs
  alias memerr="grep 'memory read error' /var/log/kern.log | sed -r 's/([[:alpha:]]{3}\s[[:digit:]]{2}\s[[:digit:]]{2}:[[:digit:]]{2}).*CPU_SrcID#([[:digit:]]+).*Chan#([[:digit:]]+).*DIMM#([[:digit:]]+).*/\1 CPU:\2 Channel:\3 DIMM:\4/' | sort | uniq -c"
  
  # KVM Guest Info
  kvm-info () {
  printf "%-15s %-7s %-19s %-45s %-6s %-0s\n" "hostname" "vnic" "mac addr" "disk img" "vnc" "ip addr"
  for i in `sudo virsh list --all | tail -n +3 | awk '{print $2}'`; do
    echo $(sudo virsh dumpxml $i |
    egrep "(vnet|mac address|source file)" | cut -d "'" -f2) | while read img mac vnet; do
      vncport=$(virsh dumpxml $i| egrep "vnc" | cut -d "'" -f4)
      vncport=${vncport:="NA"}
      hostip=$(host $i | head -n1 | awk '{print $NF}')
      hostip=${hostip:="NA"}
      printf "%-15s %-7s %-19s %-45s %-6s %-15s\n" $i $vnet $mac $img $vncport $hostip
    done
  done
  }
  
  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

  export NVM_DIR="$HOME/.nvm"
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

  if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

p10krc: |
  {% raw %}
  # Generated by Powerlevel10k configuration wizard on 2019-10-22 at 19:53 MDT.
  # Based on romkatv/powerlevel10k/config/p10k-rainbow.zsh, checksum 41085.
  # Wizard options: nerdfont-complete + powerline, small icons, rainbow, time,
  # angled separators, sharp heads, flat tails, 2 lines, disconnected, no frame, sparse,
  # many icons, concise.
  # Type `p10k configure` to generate another config.
  #
  # Config for Powerlevel10k with powerline prompt style with colorful background.
  # Type `p10k configure` to generate your own config based on it.
  #
  # Tip: Looking for a nice color? Here's a one-liner to print colormap.
  #
  #   for i in {0..255}; do print -Pn "%${i}F${(l:3::0:)i}%f " ${${(M)$((i%8)):#7}:+$'\n'}; done
  
  # Temporarily change options.
  'builtin' 'local' '-a' 'p10k_config_opts'
  [[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
  [[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
  [[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
  'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'
  
  () {
    emulate -L zsh
    setopt no_unset extended_glob
    zmodload zsh/langinfo
    if [[ ${langinfo[CODESET]:-} != (utf|UTF)(-|)8 ]]; then
      local LC_ALL=${${(@M)$(locale -a):#*.(utf|UTF)(-|)8}[1]:-en_US.UTF-8}
    fi
  
    # Unset all configuration options. This allows you to apply configiguration changes without
    # restarting zsh. Edit ~/.p10k.zsh and type `source ~/.p10k.zsh`.
    unset -m 'POWERLEVEL9K_*'
  
    # The list of segments shown on the left. Fill it with the most important segments.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
        # =========================[ Line #1 ]=========================
        os_icon                 # os identifier
        context                 # user@hostname
        dir                     # current directory
        vcs                     # git status
        # =========================[ Line #2 ]=========================
        newline
        prompt_char             # prompt symbol
    )
  
    # The list of segments shown on the right. Fill it with less important segments.
    # Right prompt on the last prompt line (where you are typing your commands) gets
    # automatically hidden when the input line reaches it. Right prompt above the
    # last prompt line gets hidden if it would overlap with left prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
        # =========================[ Line #1 ]=========================
        status                  # exit code of the last command
        command_execution_time  # duration of the last command
        background_jobs         # presence of background jobs
        virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)
        anaconda                # conda environment (https://conda.io/)
        pyenv                   # python environment (https://github.com/pyenv/pyenv)
        nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)
        nvm                     # node.js version from nvm (https://github.com/nvm-sh/nvm)
        nodeenv                 # node.js environment (https://github.com/ekalinin/nodeenv)
        # node_version          # node.js version
        # go_version            # go version (https://golang.org)
        # rust_version          # rustc version (https://www.rust-lang.org)
        # dotnet_version        # .NET version (https://dotnet.microsoft.com)
        rbenv                   # ruby version from rbenv (https://github.com/rbenv/rbenv)
        rvm                     # ruby version from rvm (https://rvm.io)
        kubecontext             # current kubernetes context (https://kubernetes.io/)
        terraform               # terraform workspace (https://www.terraform.io)
        aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)
        # aws_eb_env            # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)
        # azure                 # azure account name (https://docs.microsoft.com/en-us/cli/azure)
        nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)
        ranger                  # ranger shell (https://github.com/ranger/ranger)
        # vpn_ip                # virtual private network indicator
        # ram                   # free RAM
        # load                  # CPU load
        time                    # current time
        # =========================[ Line #2 ]=========================
        newline
        # public_ip             # public IP address
        # proxy                 # system-wide http/https/ftp proxy
        # battery               # internal battery
        # example               # example user-defined segment (see prompt_example function below)
    )
  
    # To disable default icons for all segments, set POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION=''.
    #
    # To enable default icons for all segments, don't define POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION
    # or set it to '${P9K_VISUAL_IDENTIFIER}'.
    #
    # To remove trailing space from all default icons, set POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION
    # to '${P9K_VISUAL_IDENTIFIER% }'.
    #
    # To enable default icons for one segment (e.g., dir), set
    # POWERLEVEL9K_DIR_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'.
    #
    # To assign a specific icon to one segment (e.g., dir), set
    # POWERLEVEL9K_DIR_VISUAL_IDENTIFIER_EXPANSION='⭐'.
    #
    # To assign a specific icon to a segment in a given state (e.g., dir in state NOT_WRITABLE),
    # set POWERLEVEL9K_DIR_NOT_WRITABLE_VISUAL_IDENTIFIER_EXPANSION='⭐'.
    #
    # Note: You can use $'\u2B50' instead of '⭐'. It's especially convenient when specifying
    # icons that your text editor cannot render. Don't forget to put $ and use single quotes when
    # defining icons via Unicode codepoints.
    #
    # Note: Many default icons cannot be displayed with system fonts. You'll need to install a
    # capable font to use them. See POWERLEVEL9K_MODE below.
    typeset -g POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER// }'
  
    # This option makes a difference only when default icons are enabled for all or some prompt
    # segments (see POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION above). LOCK_ICON can be printed as
    # $'\uE0A2', $'\uE138' or $'\uF023' depending on POWERLEVEL9K_MODE. The correct value of this
    # parameter depends on the provider of the font your terminal is using.
    #
    #   Font Provider                    | POWERLEVEL9K_MODE
    #   ---------------------------------+-------------------
    #   Powerline                        | powerline
    #   Font Awesome                     | awesome-fontconfig
    #   Adobe Source Code Pro            | awesome-fontconfig
    #   Source Code Pro                  | awesome-fontconfig
    #   Awesome-Terminal Fonts (regular) | awesome-fontconfig
    #   Awesome-Terminal Fonts (patched) | awesome-patched
    #   Nerd Fonts                       | nerdfont-complete
    #   Other                            | compatible
    #
    # If this looks overwhelming, either stick with a preinstalled system font and set
    # POWERLEVEL9K_MODE=compatible, or install the recommended Powerlevel10k font from
    # https://github.com/romkatv/powerlevel10k/#recommended-meslo-nerd-font-patched-for-powerlevel10k
    # and set POWERLEVEL9K_MODE=nerdfont-complete.
    typeset -g POWERLEVEL9K_MODE=nerdfont-complete
  
    # When set to true, icons appear before content on both sides of the prompt. When set
    # to false, icons go after content. If empty or not set, icons go before content in the left
    # prompt and after content in the right prompt.
    #
    # You can also override it for a specific segment:
    #
    #   POWERLEVEL9K_STATUS_ICON_BEFORE_CONTENT=false
    #
    # Or for a specific segment in specific state:
    #
    #   POWERLEVEL9K_DIR_NOT_WRITABLE_ICON_BEFORE_CONTENT=false
    typeset -g POWERLEVEL9K_ICON_BEFORE_CONTENT=
  
    # Add an empty line before each prompt.
    typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
  
    # Connect left prompt lines with these symbols. You'll probably want to use the same color
    # as POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND below.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=
    typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_PREFIX=
    typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=
    # Connect right prompt lines with these symbols.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_SUFFIX=
    typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_SUFFIX=
    typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_SUFFIX=
  
    # Filler between left and right prompt on the first prompt line. You can set it to ' ', '·' or
    # '─'. The last two make it easier to see the alignment between left and right prompt and to
    # separate prompt from command output. You might want to set POWERLEVEL9K_PROMPT_ADD_NEWLINE=false
    # for more compact prompt if using using this option.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR=' '
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_BACKGROUND=
    if [[ $POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR != ' ' ]]; then
      # The color of the filler. You'll probably want to match the color of POWERLEVEL9K_MULTILINE
      # ornaments defined above.
      typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND=242
      # Start filler from the edge of the screen if there are no left segments on the first line.
      typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_FIRST_SEGMENT_END_SYMBOL='%{%}'
      # End filler on the edge of the screen if there are no right segments on the first line.
      typeset -g POWERLEVEL9K_EMPTY_LINE_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='%{%}'
    fi
  
    # Separator between same-color segments on the left.
    typeset -g POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR='\uE0B1'
    # Separator between same-color segments on the right.
    typeset -g POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR='\uE0B3'
    # Separator between different-color segments on the left.
    typeset -g POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR='\uE0B0'
    # Separator between different-color segments on the right.
    typeset -g POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR='\uE0B2'
    # The right end of left prompt.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL='\uE0B0'
    # The left end of right prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='\uE0B2'
    # The left end of left prompt.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL=''
    # The right end of right prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_LAST_SEGMENT_END_SYMBOL=''
    # Left prompt terminator for lines without any segments.
    typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=
  
    #################################[ os_icon: os identifier ]##################################
    # OS identifier color.
    typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=255
    # typeset -g POWERLEVEL9K_OS_ICON_BACKGROUND=0
    # Make the icon bold.
    typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='%B${P9K_CONTENT// }'
  
    ################################[ prompt_char: prompt symbol ]################################
    # Transparent background.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_BACKGROUND=
    # Green prompt symbol if the last command succeeded.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS}_FOREGROUND=76
    # Red prompt symbol if the last command failed.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS}_FOREGROUND=196
    # Default prompt symbol.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'
    # Prompt symbol in command vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VICMD_CONTENT_EXPANSION='❮'
    # Prompt symbol in visual vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIVIS_CONTENT_EXPANSION='Ⅴ'
    # Prompt symbol in overwrite vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIOWR_CONTENT_EXPANSION='▶'
    typeset -g POWERLEVEL9K_PROMPT_CHAR_OVERWRITE_STATE=true
    # No line terminator if prompt_char is the last segment.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=
    # No line introducer if prompt_char is the first segment.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL=
    # No surrounding whitespace.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_{LEFT,RIGHT}_WHITESPACE=
  
    ##################################[ dir: current directory ]##################################
    # Current directory background color.
    # typeset -g POWERLEVEL9K_DIR_BACKGROUND=4
    # Default current directory foreground color.
    typeset -g POWERLEVEL9K_DIR_FOREGROUND=254
    # If directory is too long, shorten some of its segments to the shortest possible unique
    # prefix. The shortened directory can be tab-completed to the original.
    typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique
    # Replace removed segment suffixes with this symbol.
    typeset -g POWERLEVEL9K_SHORTEN_DELIMITER=
    # Color of the shortened directory segments.
    typeset -g POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=250
    # Color of the anchor directory segments. Anchor segments are never shortened. The first
    # segment is always an anchor.
    typeset -g POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=255
    # Display anchor directory segments in bold.
    typeset -g POWERLEVEL9K_DIR_ANCHOR_BOLD=true
    # Don't shorten directories that contain any of these files. They are anchors.
    local anchor_files=(
      .bzr
      .citc
      .git
      .hg
      .node-version
      .python-version
      .ruby-version
      .shorten_folder_marker
      .svn
      .terraform
      CVS
      Cargo.toml
      composer.json
      go.mod
      package.json
    )
    typeset -g POWERLEVEL9K_SHORTEN_FOLDER_MARKER="(${(j:|:)anchor_files})"
    # Don't shorten this many last directory segments. They are anchors.
    typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
    # Shorten directory if it's longer than this even if there is space for it. The value can
    # be either absolute (e.g., '80') or a percentage of terminal width (e.g, '50%'). If empty,
    # directory will be shortened only when prompt doesn't fit or when other parameters demand it
    # (see POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS and POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT below).
    typeset -g POWERLEVEL9K_DIR_MAX_LENGTH=80
    # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least this
    # many columns for typing commands.
    typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS=40
    # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least
    # COLUMNS * POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT * 0.01 columns for typing commands.
    typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT=50
    # If set to true, embed a hyperlink into the directory. Useful for quickly
    # opening a directory in the file manager simply by clicking the link.
    # Can also be handy when the directory is shortened, as it allows you to see
    # the full directory that was used in previous commands.
    typeset -g POWERLEVEL9K_DIR_HYPERLINK=false
  
    # Enable special styling for non-writable directories.
    typeset -g POWERLEVEL9K_DIR_SHOW_WRITABLE=true
    # Show this icon when the current directory is not writable. POWERLEVEL9K_DIR_SHOW_WRITABLE
    # above must be set to true for this parameter to have effect.
    # typeset -g POWERLEVEL9K_DIR_NOT_WRITABLE_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    # Custom prefix.
    # typeset -g POWERLEVEL9K_DIR_PREFIX='in '
  
    # POWERLEVEL9K_DIR_CLASSES allows you to specify custom icons for different directories.
    # It must be an array with 3 * N elements. Each triplet consists of:
    #
    #   1. A pattern against which the current directory is matched. Matching is done with
    #      extended_glob option enabled.
    #   2. Directory class for the purpose of styling.
    #   3. Icon.
    #
    # Triplets are tried in order. The first triplet whose pattern matches $PWD wins. If there
    # are no matches, the directory will have no icon.
    #
    # Example:
    #
    #   typeset -g POWERLEVEL9K_DIR_CLASSES=(
    #       '~/work(/*)#'  WORK     '(╯°□°）╯︵ ┻━┻'
    #       '~(/*)#'       HOME     '⌂'
    #       '*'            DEFAULT  '')
    #
    # With these settings, the current directory in the prompt may look like this:
    #
    #   (╯°□°）╯︵ ┻━┻ ~/work/projects/important/urgent
    #
    # Or like this:
    #
    #   ⌂ ~/best/powerlevel10k
    #
    # You can also set different colors for directories of different classes. Remember to override
    # FOREGROUND, SHORTENED_FOREGROUND and ANCHOR_FOREGROUND for every directory class that you wish
    # to have its own color.
    #
    #   typeset -g POWERLEVEL9K_DIR_WORK_BACKGROUND=4
    #   typeset -g POWERLEVEL9K_DIR_WORK_FOREGROUND=254
    #   typeset -g POWERLEVEL9K_DIR_WORK_SHORTENED_FOREGROUND=250
    #   typeset -g POWERLEVEL9K_DIR_WORK_ANCHOR_FOREGROUND=255
    #
    # typeset -g POWERLEVEL9K_DIR_CLASSES=()
  
    #####################################[ vcs: git status ]######################################
    # Versio control system colors.
    # typeset -g POWERLEVEL9K_VCS_CLEAN_BACKGROUND=2
    # typeset -g POWERLEVEL9K_VCS_MODIFIED_BACKGROUND=3
    # typeset -g POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND=2
    # typeset -g POWERLEVEL9K_VCS_CONFLICTED_BACKGROUND=3
    # typeset -g POWERLEVEL9K_VCS_LOADING_BACKGROUND=8
  
    # Branch icon. Set this parameter to '\uF126 ' for the popular Powerline branch icon.
    typeset -g POWERLEVEL9K_VCS_BRANCH_ICON='\uF126 '
    POWERLEVEL9K_VCS_BRANCH_ICON=${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}
  
    # Untracked files icon. It's really a question mark, your font isn't broken.
    # Change the value of this parameter to show a different icon.
    typeset -g POWERLEVEL9K_VCS_UNTRACKED_ICON='?'
    POWERLEVEL9K_VCS_UNTRACKED_ICON=${(g::)POWERLEVEL9K_VCS_UNTRACKED_ICON}
  
    # Formatter for Git status.
    #
    # Example output: master ⇣42⇡42 *42 merge ~42 +42 !42 ?42.
    #
    # You can edit the function to customize how Git status looks.
    #
    # VCS_STATUS_* parameters are set by gitstatus plugin. See reference:
    # https://github.com/romkatv/gitstatus/blob/master/gitstatus.plugin.zsh.
    function my_git_formatter() {
      emulate -L zsh
  
      if [[ -n $P9K_CONTENT ]]; then
        # If P9K_CONTENT is not empty, use it. It's either "loading" or from vcs_info (not from
        # gitstatus plugin). VCS_STATUS_* parameters are not available in this case.
        typeset -g my_git_format=$P9K_CONTENT
        return
      fi
  
      # Styling for different parts of Git status.
      local       meta='%7F' # white foreground
      local      clean='%0F' # black foreground
      local   modified='%0F' # black foreground
      local  untracked='%0F' # black foreground
      local conflicted='%1F' # red foreground
  
      local res
      local where  # branch name, tag or commit
      if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
        res+="${clean}${POWERLEVEL9K_VCS_BRANCH_ICON}"
        where=${(V)VCS_STATUS_LOCAL_BRANCH}
      elif [[ -n $VCS_STATUS_TAG ]]; then
        res+="${meta}#"
        where=${(V)VCS_STATUS_TAG}
      else
        res+="${meta}@"
        where=${VCS_STATUS_COMMIT[1,8]}
      fi
  
      # If local branch name or tag is at most 32 characters long, show it in full.
      # Otherwise show the first 12 … the last 12.
      (( $#where > 32 )) && where[13,-13]="…"
      res+="${clean}${where//\%/%%}"  # escape %
  
      # Show tracking branch name if it differs from local branch.
      if [[ -n ${VCS_STATUS_REMOTE_BRANCH:#$VCS_STATUS_LOCAL_BRANCH} ]]; then
        res+="${meta}:${clean}${(V)VCS_STATUS_REMOTE_BRANCH//\%/%%}"  # escape %
      fi
  
      # ⇣42 if behind the remote.
      (( VCS_STATUS_COMMITS_BEHIND )) && res+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"
      # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
      (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && res+=" "
      (( VCS_STATUS_COMMITS_AHEAD  )) && res+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"
      # *42 if have stashes.
      (( VCS_STATUS_STASHES        )) && res+=" ${clean}*${VCS_STATUS_STASHES}"
      # 'merge' if the repo is in an unusual state.
      [[ -n $VCS_STATUS_ACTION     ]] && res+=" ${conflicted}${VCS_STATUS_ACTION}"
      # ~42 if have merge conflicts.
      (( VCS_STATUS_NUM_CONFLICTED )) && res+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
      # +42 if have staged changes.
      (( VCS_STATUS_NUM_STAGED     )) && res+=" ${modified}+${VCS_STATUS_NUM_STAGED}"
      # !42 if have unstaged changes.
      (( VCS_STATUS_NUM_UNSTAGED   )) && res+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"
      # ?42 if have untracked files. It's really a question mark, your font isn't broken.
      # See POWERLEVEL9K_VCS_UNTRACKED_ICON above if you want to use a different icon.
      # Remove the next line if you don't want to see untracked files at all.
      (( VCS_STATUS_NUM_UNTRACKED  )) && res+=" ${untracked}${POWERLEVEL9K_VCS_UNTRACKED_ICON}${VCS_STATUS_NUM_UNTRACKED}"
  
      typeset -g my_git_format=$res
    }
    functions -M my_git_formatter 2>/dev/null
  
    # Disable the default Git status formatting.
    typeset -g POWERLEVEL9K_VCS_DISABLE_GITSTATUS_FORMATTING=true
    # Install our own Git status formatter.
    typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${$((my_git_formatter(1)))+${my_git_format}}'
    # Enable counters for staged, unstaged, etc.
    typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED,CONFLICTED,COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=-1
  
    # Custom icon.
    # typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_VCS_PREFIX='on '
  
    # Show status of repositories of these types. You can add svn and/or hg if you are
    # using them. If you do, your prompt may become slow even when your current directory
    # isn't in an svn or hg reposotiry.
    typeset -g POWERLEVEL9K_VCS_BACKENDS=(git)
  
    ##########################[ status: exit code of the last command ]###########################
    # Enable OK_PIPE, ERROR_PIPE and ERROR_SIGNAL status states to allow us to enable, disable and
    # style them independently from the regular OK and ERROR state.
    typeset -g POWERLEVEL9K_STATUS_EXTENDED_STATES=true
  
    # Status on success. No content, just an icon. No need to show it if prompt_char is enabled as
    # it will signify success by turning green.
    typeset -g POWERLEVEL9K_STATUS_OK=false
    typeset -g POWERLEVEL9K_STATUS_OK_VISUAL_IDENTIFIER_EXPANSION='✔'
    # typeset -g POWERLEVEL9K_STATUS_OK_FOREGROUND=2
    # typeset -g POWERLEVEL9K_STATUS_OK_BACKGROUND=0
  
    # Status when some part of a pipe command fails but the overall exit status is zero. It may look
    # like this: 1|0.
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE=true
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE_VISUAL_IDENTIFIER_EXPANSION='✔'
    # typeset -g POWERLEVEL9K_STATUS_OK_PIPE_FOREGROUND=2
    # typeset -g POWERLEVEL9K_STATUS_OK_PIPE_BACKGROUND=0
  
    # Status when it's just an error code (e.g., '1'). No need to show it if prompt_char is enabled as
    # it will signify error by turning red.
    typeset -g POWERLEVEL9K_STATUS_ERROR=false
    typeset -g POWERLEVEL9K_STATUS_ERROR_VISUAL_IDENTIFIER_EXPANSION='↵'
    # typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=3
    # typeset -g POWERLEVEL9K_STATUS_ERROR_BACKGROUND=1
  
    # Status when the last command was terminated by a signal.
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL=true
    # Use terse signal names: "INT" instead of "SIGINT(2)".
    typeset -g POWERLEVEL9K_STATUS_VERBOSE_SIGNAME=false
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_VISUAL_IDENTIFIER_EXPANSION='↵'
    # typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_FOREGROUND=3
    # typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_BACKGROUND=1
  
    # Status when some part of a pipe command fails and the overall exit status is also non-zero.
    # It may look like this: 1|0.
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE=true
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_VISUAL_IDENTIFIER_EXPANSION='↵'
    # typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_FOREGROUND=3
    # typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_BACKGROUND=1
  
    ###################[ command_execution_time: duration of the last command ]###################
    # Execution time color.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=0
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND=3
    # Show duration of the last command if takes longer than this many seconds.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=3
    # Show this many fractional digits. Zero means round to seconds.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0
    # Duration format: 1d 2h 3m 4s.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FORMAT='d h m s'
    # Custom icon.
    # typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PREFIX='took '
  
    #######################[ background_jobs: presence of background jobs ]#######################
    # Background jobs color.
    # typeset -g POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=6
    # typeset -g POWERLEVEL9K_BACKGROUND_JOBS_BACKGROUND=0
    # Don't show the number of background jobs.
    typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE=false
    # Icon to show when there are background jobs.
    typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER// }'
  
    ##########[ nordvpn: nordvpn connection status, linux only (https://nordvpn.com/) ]###########
    # NordVPN connection indicator color.
    # typeset -g POWERLEVEL9K_NORDVPN_FOREGROUND=7
    # typeset -g POWERLEVEL9K_NORDVPN_BACKGROUND=4
    # Hide NordVPN connection indicator when not connected.
    typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_CONTENT_EXPANSION=
    typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_VISUAL_IDENTIFIER_EXPANSION=
    # Custom icon.
    # typeset -g POWERLEVEL9K_NORDVPN_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    #################[ ranger: ranger shell (https://github.com/ranger/ranger) ]##################
    # Ranger shell color.
    # typeset -g POWERLEVEL9K_RANGER_FOREGROUND=3
    # typeset -g POWERLEVEL9K_RANGER_BACKGROUND=0
    # Custom icon.
    # typeset -g POWERLEVEL9K_RANGER_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ######################################[ ram: free RAM ]#######################################
    # RAM color.
    # typeset -g POWERLEVEL9K_RAM_FOREGROUND=0
    # typeset -g POWERLEVEL9K_RAM_BACKGROUND=3
    # Custom icon.
    # typeset -g POWERLEVEL9K_RAM_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ######################################[ load: CPU load ]######################################
    # Show average CPU load over this many last minutes. Valid values are 1, 5 and 15.
    typeset -g POWERLEVEL9K_LOAD_WHICH=5
    # Load color when load is under 50%.
    # typeset -g POWERLEVEL9K_LOAD_NORMAL_FOREGROUND=0
    # typeset -g POWERLEVEL9K_LOAD_NORMAL_BACKGROUND=2
    # Load color when load is between 50% and 70%.
    # typeset -g POWERLEVEL9K_LOAD_WARNING_FOREGROUND=0
    # typeset -g POWERLEVEL9K_LOAD_WARNING_BACKGROUND=3
    # Load color when load is over 70%.
    # typeset -g POWERLEVEL9K_LOAD_CRITICAL_FOREGROUND=0
    # typeset -g POWERLEVEL9K_LOAD_CRITICAL_BACKGROUND=1
    # Custom icon.
    # typeset -g POWERLEVEL9K_LOAD_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ##################################[ context: user@hostname ]##################################
    # Default context color.
    typeset -g POWERLEVEL9K_CONTEXT_FOREGROUND=0
    typeset -g POWERLEVEL9K_CONTEXT_BACKGROUND=255
    # Default context format: %n is username, %m is hostname.
    typeset -g POWERLEVEL9K_CONTEXT_TEMPLATE='%n@%m'
  
    # Context color when running with privileges.
    typeset -g POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND=0
    typeset -g POWERLEVEL9K_CONTEXT_ROOT_BACKGROUND=3
    # Context format when running with privileges: %n is username, %m is hostname.
    typeset -g POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE='%n@%m'
  
    # Don't show context unless running with privileges or in SSH.
    # Tip: Remove the next line to always show context.
    #typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=
  
    # Custom icon.
    # typeset -g POWERLEVEL9K_CONTEXT_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_CONTEXT_PREFIX='with '
  
    ###[ virtualenv: python virtual environment (https://docs.python.org/3/library/venv.html) ]###
    # Python virtual environment color.
    # typeset -g POWERLEVEL9K_VIRTUALENV_FOREGROUND=0
    # typeset -g POWERLEVEL9K_VIRTUALENV_BACKGROUND=4
    # Don't show Python version next to the virtual environment name.
    typeset -g POWERLEVEL9K_VIRTUALENV_SHOW_PYTHON_VERSION=false
    # Separate environment name from Python version only with a space.
    typeset -g POWERLEVEL9K_VIRTUALENV_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    # typeset -g POWERLEVEL9K_VIRTUALENV_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    #####################[ anaconda: conda environment (https://conda.io/) ]######################
    # Anaconda environment color.
    # typeset -g POWERLEVEL9K_ANACONDA_FOREGROUND=0
    # typeset -g POWERLEVEL9K_ANACONDA_BACKGROUND=4
    # Don't show Python version next to the anaconda environment name.
    typeset -g POWERLEVEL9K_ANACONDA_SHOW_PYTHON_VERSION=false
    # Separate environment name from Python version only with a space.
    typeset -g POWERLEVEL9K_ANACONDA_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    # typeset -g POWERLEVEL9K_ANACONDA_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ################[ pyenv: python environment (https://github.com/pyenv/pyenv) ]################
    # Pyenv color.
    # typeset -g POWERLEVEL9K_PYENV_FOREGROUND=0
    # typeset -g POWERLEVEL9K_PYENV_BACKGROUND=4
    # Don't show the current Python version if it's the same as global.
    typeset -g POWERLEVEL9K_PYENV_PROMPT_ALWAYS_SHOW=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_PYENV_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ##########[ nodenv: node.js version from nodenv (https://github.com/nodenv/nodenv) ]##########
    # Nodenv color.
    # typeset -g POWERLEVEL9K_NODENV_FOREGROUND=2
    # typeset -g POWERLEVEL9K_NODENV_BACKGROUND=0
    # Don't show node version if it's the same as global: $(nodenv version-name) == $(nodenv global).
    typeset -g POWERLEVEL9K_NODENV_PROMPT_ALWAYS_SHOW=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODENV_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ##############[ nvm: node.js version from nvm (https://github.com/nvm-sh/nvm) ]###############
    # Nvm color.
    # typeset -g POWERLEVEL9K_NVM_FOREGROUND=70
    # Custom icon.
    # typeset -g POWERLEVEL9K_NVM_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ############[ nodeenv: node.js environment (https://github.com/ekalinin/nodeenv) ]############
    # Nodeenv color.
    # typeset -g POWERLEVEL9K_NODEENV_FOREGROUND=2
    # typeset -g POWERLEVEL9K_NODEENV_BACKGROUND=0
    # Don't show Node version next to the environment name.
    typeset -g POWERLEVEL9K_NODEENV_SHOW_NODE_VERSION=false
    # Separate environment name from Node version only with a space.
    typeset -g POWERLEVEL9K_NODEENV_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODEENV_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ##############################[ node_version: node.js version ]###############################
    # Node version color.
    # typeset -g POWERLEVEL9K_NODE_VERSION_FOREGROUND=7
    # typeset -g POWERLEVEL9K_NODE_VERSION_BACKGROUND=2
    # Show node version only when in a directory tree containing package.json.
    typeset -g POWERLEVEL9K_NODE_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODE_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    #######################[ go_version: go version (https://golang.org) ]########################
    # Go version color.
    # typeset -g POWERLEVEL9K_GO_VERSION_FOREGROUND=255
    # typeset -g POWERLEVEL9K_GO_VERSION_BACKGROUND=2
    # Show go version only when in a go project subdirectory.
    typeset -g POWERLEVEL9K_GO_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_GO_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    #################[ rust_version: rustc version (https://www.rust-lang.org) ]##################
    # Rust version color.
    # typeset -g POWERLEVEL9K_RUST_VERSION_FOREGROUND=0
    # typeset -g POWERLEVEL9K_RUST_VERSION_BACKGROUND=208
    # Show rust version only when in a rust project subdirectory.
    typeset -g POWERLEVEL9K_RUST_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_RUST_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ###############[ dotnet_version: .NET version (https://dotnet.microsoft.com) ]################
    # .NET version color.
    # typeset -g POWERLEVEL9K_DOTNET_VERSION_FOREGROUND=7
    # typeset -g POWERLEVEL9K_DOTNET_VERSION_BACKGROUND=5
    # Show .NET version only when in a .NET project subdirectory.
    typeset -g POWERLEVEL9K_DOTNET_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_DOTNET_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    #############[ rbenv: ruby version from rbenv (https://github.com/rbenv/rbenv) ]##############
    # Rbenv color.
    # typeset -g POWERLEVEL9K_RBENV_FOREGROUND=0
    # typeset -g POWERLEVEL9K_RBENV_BACKGROUND=1
    # Don't show ruby version if it's the same as global: $(rbenv version-name) == $(rbenv global).
    typeset -g POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_RBENV_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    #######################[ rvm: ruby version from rvm (https://rvm.io) ]########################
    # Rvm color.
    # typeset -g POWERLEVEL9K_RVM_FOREGROUND=0
    # typeset -g POWERLEVEL9K_RVM_BACKGROUND=240
    # Don't show @gemset at the end.
    typeset -g POWERLEVEL9K_RVM_SHOW_GEMSET=false
    # Don't show ruby- at the front.
    typeset -g POWERLEVEL9K_RVM_SHOW_PREFIX=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ################[ terraform: terraform workspace (https://www.terraform.io) ]#################
    # Terraform color.
    # typeset -g POWERLEVEL9K_TERRAFORM_FOREGROUND=4
    # typeset -g POWERLEVEL9K_TERRAFORM_BACKGROUND=0
    # Custom icon.
    # typeset -g POWERLEVEL9K_TERRAFORM_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    #[ aws: aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) ]#
    # AWS profile color.
    # typeset -g POWERLEVEL9K_AWS_FOREGROUND=7
    # typeset -g POWERLEVEL9K_AWS_BACKGROUND=1
    # Custom icon.
    # typeset -g POWERLEVEL9K_AWS_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    #[ aws_eb_env: aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/) ]#
    # AWS Elastic Beanstalk environment color.
    # typeset -g POWERLEVEL9K_AWS_EB_ENV_FOREGROUND=2
    # typeset -g POWERLEVEL9K_AWS_EB_ENV_BACKGROUND=0
    # Custom icon.
    # typeset -g POWERLEVEL9K_AWS_EB_ENV_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ##########[ azure: azure account name (https://docs.microsoft.com/en-us/cli/azure) ]##########
    # Azure account name color.
    # typeset -g POWERLEVEL9K_AZURE_FOREGROUND=7
    # typeset -g POWERLEVEL9K_AZURE_BACKGROUND=4
    # Custom icon.
    # typeset -g POWERLEVEL9K_AZURE_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    #############[ kubecontext: current kubernetes context (https://kubernetes.io/) ]#############
    # Kubernetes context classes for the purpose of using different colors, icons and expansions with
    # different contexts.
    #
    # POWERLEVEL9K_KUBECONTEXT_CLASSES is an array with even number of elements. The first element
    # in each pair defines a pattern against which the current kubernetes context gets matched.
    # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)
    # that gets matched. If you unset all POWERLEVEL9K_KUBECONTEXT_*CONTENT_EXPANSION parameters,
    # you'll see this value in your prompt. The second element of each pair in
    # POWERLEVEL9K_KUBECONTEXT_CLASSES defines the context class. Patterns are tried in order. The
    # first match wins.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(
    #     '*prod*'  PROD
    #     '*test*'  TEST
    #     '*'       DEFAULT)
    #
    # If your current kubernetes context is "deathray-testing/default", its class is TEST
    # because "deathray-testing/default" doesn't match the pattern '*prod*' but does match '*test*'.
    #
    # You can define different colors, icons and content expansions for different classes:
    #
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_FOREGROUND=0
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_BACKGROUND=2
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'
    typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(
        # '*prod*'  PROD    # These values are examples that are unlikely
        # '*test*'  TEST    # to match your needs. Customize them as needed.
        '*'       DEFAULT)
    typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_FOREGROUND=7
    typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_BACKGROUND=5
    # typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    # Use POWERLEVEL9K_KUBECONTEXT_CONTENT_EXPANSION to specify the content displayed by kubecontext
    # segment. Parameter expansions are very flexible and fast, too. See reference:
    # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion.
    #
    # Within the expansion the following parameters are always available:
    #
    # - P9K_CONTENT                The content that would've been displayed if there was no content
    #                              expansion defined.
    # - P9K_KUBECONTEXT_NAME       The current context's name. Corresponds to column NAME in the
    #                              output of `kubectl config get-contexts`.
    # - P9K_KUBECONTEXT_CLUSTER    The current context's cluster. Corresponds to column CLUSTER in the
    #                              output of `kubectl config get-contexts`.
    # - P9K_KUBECONTEXT_NAMESPACE  The current context's namespace. Corresponds to column NAMESPACE
    #                              in the output of `kubectl config get-contexts`. If there is no
    #                              namespace, the parameter is set to "default".
    #
    # If the context points to Google Kubernetes Engine (GKE) or Elastic Kubernetes Service (EKS),
    # the following extra parameters are available:
    #
    # - P9K_KUBECONTEXT_CLOUD_NAME     Either "gke" or "eks".
    # - P9K_KUBECONTEXT_CLOUD_ACCOUNT  Account/project ID.
    # - P9K_KUBECONTEXT_CLOUD_ZONE     Availability zone.
    # - P9K_KUBECONTEXT_CLOUD_CLUSTER  Cluster.
    #
    # P9K_KUBECONTEXT_CLOUD_* parameters are derived from P9K_KUBECONTEXT_CLUSTER. For example,
    # if P9K_KUBECONTEXT_CLUSTER is "gke_my-account_us-east1-a_my-cluster-01":
    #
    #   - P9K_KUBECONTEXT_CLOUD_NAME=gke
    #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=my-account
    #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east1-a
    #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01
    #
    # If P9K_KUBECONTEXT_CLUSTER is "arn:aws:eks:us-east-1:123456789012:cluster/my-cluster-01":
    #
    #   - P9K_KUBECONTEXT_CLOUD_NAME=eks
    #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=123456789012
    #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east-1
    #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01
    typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION=
    # Show P9K_KUBECONTEXT_CLOUD_CLUSTER if it's not empty and fall back to P9K_KUBECONTEXT_NAME.
    POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${P9K_KUBECONTEXT_CLOUD_CLUSTER:-${P9K_KUBECONTEXT_NAME}}'
    # Append the current context's namespace if it's not "default".
    POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${${:-/$P9K_KUBECONTEXT_NAMESPACE}:#/default}'
  
    # Custom prefix.
    # typeset -g POWERLEVEL9K_KUBECONTEXT_PREFIX='at '
  
    ###############################[ public_ip: public IP address ]###############################
    # Public IP color.
    # typeset -g POWERLEVEL9K_PUBLIC_IP_FOREGROUND=7
    # typeset -g POWERLEVEL9K_PUBLIC_IP_BACKGROUND=0
    # Custom icon.
    # typeset -g POWERLEVEL9K_PUBLIC_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ########################[ vpn_ip: virtual private network indicator ]#########################
    # VPN IP color.
    # typeset -g POWERLEVEL9K_VPN_IP_FOREGROUND=0
    # typeset -g POWERLEVEL9K_VPN_IP_BACKGROUND=6
    # When on VPN, show just an icon without the IP address.
    typeset -g POWERLEVEL9K_VPN_IP_CONTENT_EXPANSION=
    # Regular expression for the VPN network interface. Run ifconfig while on VPN to see the
    # name of the interface.
    typeset -g POWERLEVEL9K_VPN_IP_INTERFACE='(wg|(.*tun))[0-9]*'
    # Icon to show when on VPN.
    typeset -g POWERLEVEL9K_VPN_IP_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER// }'
  
    #########################[ proxy: system-wide http/https/ftp proxy ]##########################
    # Proxy color.
    # typeset -g POWERLEVEL9K_PROXY_FOREGROUND=4
    # typeset -g POWERLEVEL9K_PROXY_BACKGROUND=0
    # Custom icon.
    # typeset -g POWERLEVEL9K_PROXY_VISUAL_IDENTIFIER_EXPANSION='⭐'
  
    ################################[ battery: internal battery ]#################################
    # Show battery in red when it's below this level and not connected to power supply.
    typeset -g POWERLEVEL9K_BATTERY_LOW_THRESHOLD=20
    typeset -g POWERLEVEL9K_BATTERY_LOW_FOREGROUND=1
    # Show battery in green when it's charging or fully charged.
    typeset -g POWERLEVEL9K_BATTERY_{CHARGING,CHARGED}_FOREGROUND=2
    # Show battery in yellow when it's discharging.
    typeset -g POWERLEVEL9K_BATTERY_DISCONNECTED_FOREGROUND=3
    # Battery pictograms going from low to high level of charge.
    typeset -g POWERLEVEL9K_BATTERY_STAGES=$'\uf58d\uf579\uf57a\uf57b\uf57c\uf57d\uf57e\uf57f\uf580\uf581\uf578'
    # Don't show the remaining time to charge/discharge.
    typeset -g POWERLEVEL9K_BATTERY_VERBOSE=false
    # typeset -g POWERLEVEL9K_BATTERY_BACKGROUND=0
  
    ####################################[ time: current time ]####################################
    # Current time color.
    # typeset -g POWERLEVEL9K_TIME_FOREGROUND=0
    # typeset -g POWERLEVEL9K_TIME_BACKGROUND=7
    # Format for the current time: 09:51:02. See `man 3 strftime`.
    typeset -g POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}'
    # If set to true, time will update when you hit enter. This way prompts for the past
    # commands will contain the start times of their commands as opposed to the default
    # behavior where they contain the end times of their preceding commands.
    typeset -g POWERLEVEL9K_TIME_UPDATE_ON_COMMAND=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_TIME_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_TIME_PREFIX='at '
  
    # Example of a user-defined prompt segment. Function prompt_example will be called on every
    # prompt if `example` prompt segment is added to POWERLEVEL9K_LEFT_PROMPT_ELEMENTS or
    # POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS. It displays an icon and orange text greeting the user.
    #
    # Type `p10k help segment` for documentation and a more sophisticated example.
    function prompt_example() {
      p10k segment -b red -f yellow -i '⭐' -t 'hello, %n'
    }
  
    # User-defined prompt segments can be customized the same way as built-in segments.
    # typeset -g POWERLEVEL9K_EXAMPLE_FOREGROUND=4
    typeset -g POWERLEVEL9K_EXAMPLE_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'
  
    # When instant prompt is disabled, prompt won't appear until zsh is fully initialized.
    # typeset -g POWERLEVEL9K_DISABLE_INSTANT_PROMPT=true
  }
  
  (( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}
  'builtin' 'unset' 'p10k_config_opts'
  {% endraw %}
